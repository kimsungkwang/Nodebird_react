{"ast":null,"code":"import { all, fork, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS\n// generateDummyPost,\n// LOAD_POSTS_FAILURE,\n// LOAD_POSTS_REQUEST,\n// LOAD_POSTS_SUCCESS,\n// REMOVE_POST_FAILURE,\n// REMOVE_POST_REQUEST,\n// REMOVE_POST_SUCCESS,\n} from '../reducers/post';\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["all","fork","put","delay","axios","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","addPost","action","id","shortId","generate","type","content","ADD_POST_TO_ME","err","console","error","response","addCommentAPI","postId","addComment","watchAddPost","takeLatest","watchAddComment","postSaga"],"sources":["/Users/kimsungkwang/WORKSPACE/Nodejs/Nodebird_react/prepare/front/sagas/post.js"],"sourcesContent":["import { all, fork, put, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport {\n    ADD_COMMENT_FAILURE,\n    ADD_COMMENT_REQUEST,\n    ADD_COMMENT_SUCCESS,\n    ADD_POST_FAILURE,\n    ADD_POST_REQUEST,\n    ADD_POST_SUCCESS,\n    // generateDummyPost,\n    // LOAD_POSTS_FAILURE,\n    // LOAD_POSTS_REQUEST,\n    // LOAD_POSTS_SUCCESS,\n    // REMOVE_POST_FAILURE,\n    // REMOVE_POST_REQUEST,\n    // REMOVE_POST_SUCCESS,\n  } from '../reducers/post';\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACIC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,EAChBC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,OACK,kBAAkB;AAE3B,SAASC,UAAU,CAACC,IAAI,EAAE;EACxB,OAAOR,KAAK,CAACS,IAAI,CAAC,WAAW,EAAED,IAAI,CAAC;AACtC;AAEA,UAAUE,OAAO,CAACC,MAAM,EAAE;EACxB,IAAI;IACF;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMa,EAAE,GAAGC,OAAO,CAACC,QAAQ,EAAE;IAC7B,MAAMhB,GAAG,CAAC;MACRiB,IAAI,EAAET,gBAAgB;MACtBE,IAAI,EAAE;QACJI,EAAE;QACFI,OAAO,EAAEL,MAAM,CAACH;MAClB;IACF,CAAC,CAAC;IACF,MAAMV,GAAG,CAAC;MACRiB,IAAI,EAAEE,cAAc;MACpBT,IAAI,EAAEI;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,MAAMpB,GAAG,CAAC;MACRiB,IAAI,EAAEX,gBAAgB;MACtBI,IAAI,EAAEU,GAAG,CAACG,QAAQ,CAACb;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,SAASc,aAAa,CAACd,IAAI,EAAE;EAC3B,OAAOR,KAAK,CAACS,IAAI,CAAE,aAAYD,IAAI,CAACe,MAAO,UAAS,EAAEf,IAAI,CAAC;AAC7D;AAEA,UAAUgB,UAAU,CAACb,MAAM,EAAE;EAC3B,IAAI;IACF;IACA,MAAMZ,KAAK,CAAC,IAAI,CAAC;IACjB,MAAMD,GAAG,CAAC;MACRiB,IAAI,EAAEZ,mBAAmB;MACzBK,IAAI,EAAEG,MAAM,CAACH;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZ,MAAMpB,GAAG,CAAC;MACRiB,IAAI,EAAEd,mBAAmB;MACzBO,IAAI,EAAEU,GAAG,CAACG,QAAQ,CAACb;IACrB,CAAC,CAAC;EACJ;AACF;AAEA,UAAUiB,YAAY,GAAG;EACvB,MAAMC,UAAU,CAACrB,gBAAgB,EAAEK,OAAO,CAAC;AAC7C;AAEA,UAAUiB,eAAe,GAAG;EAC1B,MAAMD,UAAU,CAACxB,mBAAmB,EAAEsB,UAAU,CAAC;AACnD;AAEA,eAAe,UAAUI,QAAQ,GAAG;EAClC,MAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC4B,YAAY,CAAC,EAAE5B,IAAI,CAAC8B,eAAe,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module"}